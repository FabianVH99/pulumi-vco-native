// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vco.Disk
{
    [VcoResourceType("vco:disk:ExposedDisk")]
    public partial class ExposedDisk : global::Pulumi.CustomResource
    {
        [Output("cloudspace_id")]
        public Output<string> Cloudspace_id { get; private set; } = null!;

        [Output("customerID")]
        public Output<string> CustomerID { get; private set; } = null!;

        [Output("disk_id")]
        public Output<int> Disk_id { get; private set; } = null!;

        [Output("endpoint")]
        public Output<Outputs.Endpoint> Endpoint { get; private set; } = null!;

        [Output("iops")]
        public Output<int?> Iops { get; private set; } = null!;

        [Output("max_connections")]
        public Output<int?> Max_connections { get; private set; } = null!;

        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a ExposedDisk resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExposedDisk(string name, ExposedDiskArgs args, CustomResourceOptions? options = null)
            : base("vco:disk:ExposedDisk", name, args ?? new ExposedDiskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExposedDisk(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("vco:disk:ExposedDisk", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExposedDisk resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExposedDisk Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ExposedDisk(name, id, options);
        }
    }

    public sealed class ExposedDiskArgs : global::Pulumi.ResourceArgs
    {
        [Input("cloudspace_id", required: true)]
        public Input<string> Cloudspace_id { get; set; } = null!;

        [Input("customerID", required: true)]
        private Input<string>? _customerID;
        public Input<string>? CustomerID
        {
            get => _customerID;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _customerID = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("disk_id", required: true)]
        public Input<int> Disk_id { get; set; } = null!;

        [Input("iops")]
        public Input<int>? Iops { get; set; }

        [Input("max_connections")]
        public Input<int>? Max_connections { get; set; }

        [Input("token", required: true)]
        private Input<string>? _token;
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("url", required: true)]
        private Input<string>? _url;
        public Input<string>? Url
        {
            get => _url;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _url = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ExposedDiskArgs()
        {
        }
        public static new ExposedDiskArgs Empty => new ExposedDiskArgs();
    }
}
