// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resources

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

var _ = internal.GetEnvOrDefault

type BackEndState struct {
	Serverpool_id   string `pulumi:"serverpool_id"`
	Serverpool_name string `pulumi:"serverpool_name"`
	Target_port     int    `pulumi:"target_port"`
}

type BackEndStateOutput struct{ *pulumi.OutputState }

func (BackEndStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackEndState)(nil)).Elem()
}

func (o BackEndStateOutput) ToBackEndStateOutput() BackEndStateOutput {
	return o
}

func (o BackEndStateOutput) ToBackEndStateOutputWithContext(ctx context.Context) BackEndStateOutput {
	return o
}

func (o BackEndStateOutput) Serverpool_id() pulumi.StringOutput {
	return o.ApplyT(func(v BackEndState) string { return v.Serverpool_id }).(pulumi.StringOutput)
}

func (o BackEndStateOutput) Serverpool_name() pulumi.StringOutput {
	return o.ApplyT(func(v BackEndState) string { return v.Serverpool_name }).(pulumi.StringOutput)
}

func (o BackEndStateOutput) Target_port() pulumi.IntOutput {
	return o.ApplyT(func(v BackEndState) int { return v.Target_port }).(pulumi.IntOutput)
}

type CpuTopology struct {
	Cores   int `pulumi:"cores"`
	Sockets int `pulumi:"sockets"`
	Threads int `pulumi:"threads"`
}

type CpuTopologyOutput struct{ *pulumi.OutputState }

func (CpuTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CpuTopology)(nil)).Elem()
}

func (o CpuTopologyOutput) ToCpuTopologyOutput() CpuTopologyOutput {
	return o
}

func (o CpuTopologyOutput) ToCpuTopologyOutputWithContext(ctx context.Context) CpuTopologyOutput {
	return o
}

func (o CpuTopologyOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v CpuTopology) int { return v.Cores }).(pulumi.IntOutput)
}

func (o CpuTopologyOutput) Sockets() pulumi.IntOutput {
	return o.ApplyT(func(v CpuTopology) int { return v.Sockets }).(pulumi.IntOutput)
}

func (o CpuTopologyOutput) Threads() pulumi.IntOutput {
	return o.ApplyT(func(v CpuTopology) int { return v.Threads }).(pulumi.IntOutput)
}

type Endpoint struct {
	Address         string `pulumi:"address"`
	Name            string `pulumi:"name"`
	Port            int    `pulumi:"port"`
	Private_address string `pulumi:"private_address"`
	Private_port    int    `pulumi:"private_port"`
	Psk             string `pulumi:"psk"`
	User            string `pulumi:"user"`
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func (o EndpointOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Endpoint) string { return v.Address }).(pulumi.StringOutput)
}

func (o EndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Endpoint) string { return v.Name }).(pulumi.StringOutput)
}

func (o EndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Endpoint) int { return v.Port }).(pulumi.IntOutput)
}

func (o EndpointOutput) Private_address() pulumi.StringOutput {
	return o.ApplyT(func(v Endpoint) string { return v.Private_address }).(pulumi.StringOutput)
}

func (o EndpointOutput) Private_port() pulumi.IntOutput {
	return o.ApplyT(func(v Endpoint) int { return v.Private_port }).(pulumi.IntOutput)
}

func (o EndpointOutput) Psk() pulumi.StringOutput {
	return o.ApplyT(func(v Endpoint) string { return v.Psk }).(pulumi.StringOutput)
}

func (o EndpointOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Endpoint) string { return v.User }).(pulumi.StringOutput)
}

type FirewallCustom struct {
	Cdrom_id  *int    `pulumi:"cdrom_id"`
	Disk_size *int    `pulumi:"disk_size"`
	Image_id  *int    `pulumi:"image_id"`
	Memory    *int    `pulumi:"memory"`
	Type      *string `pulumi:"type"`
	Vcpus     *int    `pulumi:"vcpus"`
}

// FirewallCustomInput is an input type that accepts FirewallCustomArgs and FirewallCustomOutput values.
// You can construct a concrete instance of `FirewallCustomInput` via:
//
//	FirewallCustomArgs{...}
type FirewallCustomInput interface {
	pulumi.Input

	ToFirewallCustomOutput() FirewallCustomOutput
	ToFirewallCustomOutputWithContext(context.Context) FirewallCustomOutput
}

type FirewallCustomArgs struct {
	Cdrom_id  pulumi.IntPtrInput    `pulumi:"cdrom_id"`
	Disk_size pulumi.IntPtrInput    `pulumi:"disk_size"`
	Image_id  pulumi.IntPtrInput    `pulumi:"image_id"`
	Memory    pulumi.IntPtrInput    `pulumi:"memory"`
	Type      pulumi.StringPtrInput `pulumi:"type"`
	Vcpus     pulumi.IntPtrInput    `pulumi:"vcpus"`
}

func (FirewallCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallCustom)(nil)).Elem()
}

func (i FirewallCustomArgs) ToFirewallCustomOutput() FirewallCustomOutput {
	return i.ToFirewallCustomOutputWithContext(context.Background())
}

func (i FirewallCustomArgs) ToFirewallCustomOutputWithContext(ctx context.Context) FirewallCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallCustomOutput)
}

func (i FirewallCustomArgs) ToFirewallCustomPtrOutput() FirewallCustomPtrOutput {
	return i.ToFirewallCustomPtrOutputWithContext(context.Background())
}

func (i FirewallCustomArgs) ToFirewallCustomPtrOutputWithContext(ctx context.Context) FirewallCustomPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallCustomOutput).ToFirewallCustomPtrOutputWithContext(ctx)
}

// FirewallCustomPtrInput is an input type that accepts FirewallCustomArgs, FirewallCustomPtr and FirewallCustomPtrOutput values.
// You can construct a concrete instance of `FirewallCustomPtrInput` via:
//
//	        FirewallCustomArgs{...}
//
//	or:
//
//	        nil
type FirewallCustomPtrInput interface {
	pulumi.Input

	ToFirewallCustomPtrOutput() FirewallCustomPtrOutput
	ToFirewallCustomPtrOutputWithContext(context.Context) FirewallCustomPtrOutput
}

type firewallCustomPtrType FirewallCustomArgs

func FirewallCustomPtr(v *FirewallCustomArgs) FirewallCustomPtrInput {
	return (*firewallCustomPtrType)(v)
}

func (*firewallCustomPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallCustom)(nil)).Elem()
}

func (i *firewallCustomPtrType) ToFirewallCustomPtrOutput() FirewallCustomPtrOutput {
	return i.ToFirewallCustomPtrOutputWithContext(context.Background())
}

func (i *firewallCustomPtrType) ToFirewallCustomPtrOutputWithContext(ctx context.Context) FirewallCustomPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallCustomPtrOutput)
}

type FirewallCustomOutput struct{ *pulumi.OutputState }

func (FirewallCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallCustom)(nil)).Elem()
}

func (o FirewallCustomOutput) ToFirewallCustomOutput() FirewallCustomOutput {
	return o
}

func (o FirewallCustomOutput) ToFirewallCustomOutputWithContext(ctx context.Context) FirewallCustomOutput {
	return o
}

func (o FirewallCustomOutput) ToFirewallCustomPtrOutput() FirewallCustomPtrOutput {
	return o.ToFirewallCustomPtrOutputWithContext(context.Background())
}

func (o FirewallCustomOutput) ToFirewallCustomPtrOutputWithContext(ctx context.Context) FirewallCustomPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallCustom) *FirewallCustom {
		return &v
	}).(FirewallCustomPtrOutput)
}

func (o FirewallCustomOutput) Cdrom_id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallCustom) *int { return v.Cdrom_id }).(pulumi.IntPtrOutput)
}

func (o FirewallCustomOutput) Disk_size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallCustom) *int { return v.Disk_size }).(pulumi.IntPtrOutput)
}

func (o FirewallCustomOutput) Image_id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallCustom) *int { return v.Image_id }).(pulumi.IntPtrOutput)
}

func (o FirewallCustomOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallCustom) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o FirewallCustomOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallCustom) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o FirewallCustomOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallCustom) *int { return v.Vcpus }).(pulumi.IntPtrOutput)
}

type FirewallCustomPtrOutput struct{ *pulumi.OutputState }

func (FirewallCustomPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallCustom)(nil)).Elem()
}

func (o FirewallCustomPtrOutput) ToFirewallCustomPtrOutput() FirewallCustomPtrOutput {
	return o
}

func (o FirewallCustomPtrOutput) ToFirewallCustomPtrOutputWithContext(ctx context.Context) FirewallCustomPtrOutput {
	return o
}

func (o FirewallCustomPtrOutput) Elem() FirewallCustomOutput {
	return o.ApplyT(func(v *FirewallCustom) FirewallCustom {
		if v != nil {
			return *v
		}
		var ret FirewallCustom
		return ret
	}).(FirewallCustomOutput)
}

func (o FirewallCustomPtrOutput) Cdrom_id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallCustom) *int {
		if v == nil {
			return nil
		}
		return v.Cdrom_id
	}).(pulumi.IntPtrOutput)
}

func (o FirewallCustomPtrOutput) Disk_size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallCustom) *int {
		if v == nil {
			return nil
		}
		return v.Disk_size
	}).(pulumi.IntPtrOutput)
}

func (o FirewallCustomPtrOutput) Image_id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallCustom) *int {
		if v == nil {
			return nil
		}
		return v.Image_id
	}).(pulumi.IntPtrOutput)
}

func (o FirewallCustomPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallCustom) *int {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.IntPtrOutput)
}

func (o FirewallCustomPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallCustom) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

func (o FirewallCustomPtrOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallCustom) *int {
		if v == nil {
			return nil
		}
		return v.Vcpus
	}).(pulumi.IntPtrOutput)
}

type FrontEnd struct {
	Ip_address *string `pulumi:"ip_address"`
	Port       int     `pulumi:"port"`
	Tls        *TLS    `pulumi:"tls"`
}

type FrontEndOutput struct{ *pulumi.OutputState }

func (FrontEndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontEnd)(nil)).Elem()
}

func (o FrontEndOutput) ToFrontEndOutput() FrontEndOutput {
	return o
}

func (o FrontEndOutput) ToFrontEndOutputWithContext(ctx context.Context) FrontEndOutput {
	return o
}

func (o FrontEndOutput) Ip_address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontEnd) *string { return v.Ip_address }).(pulumi.StringPtrOutput)
}

func (o FrontEndOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v FrontEnd) int { return v.Port }).(pulumi.IntOutput)
}

func (o FrontEndOutput) Tls() TLSPtrOutput {
	return o.ApplyT(func(v FrontEnd) *TLS { return v.Tls }).(TLSPtrOutput)
}

type HealthCheck struct {
	Interval *int    `pulumi:"interval"`
	Path     *string `pulumi:"path"`
	Port     *int    `pulumi:"port"`
	Scheme   *string `pulumi:"scheme"`
	Timeout  *int    `pulumi:"timeout"`
}

// HealthCheckInput is an input type that accepts HealthCheckArgs and HealthCheckOutput values.
// You can construct a concrete instance of `HealthCheckInput` via:
//
//	HealthCheckArgs{...}
type HealthCheckInput interface {
	pulumi.Input

	ToHealthCheckOutput() HealthCheckOutput
	ToHealthCheckOutputWithContext(context.Context) HealthCheckOutput
}

type HealthCheckArgs struct {
	Interval pulumi.IntPtrInput    `pulumi:"interval"`
	Path     pulumi.StringPtrInput `pulumi:"path"`
	Port     pulumi.IntPtrInput    `pulumi:"port"`
	Scheme   pulumi.StringPtrInput `pulumi:"scheme"`
	Timeout  pulumi.IntPtrInput    `pulumi:"timeout"`
}

func (HealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheck)(nil)).Elem()
}

func (i HealthCheckArgs) ToHealthCheckOutput() HealthCheckOutput {
	return i.ToHealthCheckOutputWithContext(context.Background())
}

func (i HealthCheckArgs) ToHealthCheckOutputWithContext(ctx context.Context) HealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckOutput)
}

func (i HealthCheckArgs) ToHealthCheckPtrOutput() HealthCheckPtrOutput {
	return i.ToHealthCheckPtrOutputWithContext(context.Background())
}

func (i HealthCheckArgs) ToHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckOutput).ToHealthCheckPtrOutputWithContext(ctx)
}

// HealthCheckPtrInput is an input type that accepts HealthCheckArgs, HealthCheckPtr and HealthCheckPtrOutput values.
// You can construct a concrete instance of `HealthCheckPtrInput` via:
//
//	        HealthCheckArgs{...}
//
//	or:
//
//	        nil
type HealthCheckPtrInput interface {
	pulumi.Input

	ToHealthCheckPtrOutput() HealthCheckPtrOutput
	ToHealthCheckPtrOutputWithContext(context.Context) HealthCheckPtrOutput
}

type healthCheckPtrType HealthCheckArgs

func HealthCheckPtr(v *HealthCheckArgs) HealthCheckPtrInput {
	return (*healthCheckPtrType)(v)
}

func (*healthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheck)(nil)).Elem()
}

func (i *healthCheckPtrType) ToHealthCheckPtrOutput() HealthCheckPtrOutput {
	return i.ToHealthCheckPtrOutputWithContext(context.Background())
}

func (i *healthCheckPtrType) ToHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckPtrOutput)
}

type HealthCheckOutput struct{ *pulumi.OutputState }

func (HealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheck)(nil)).Elem()
}

func (o HealthCheckOutput) ToHealthCheckOutput() HealthCheckOutput {
	return o
}

func (o HealthCheckOutput) ToHealthCheckOutputWithContext(ctx context.Context) HealthCheckOutput {
	return o
}

func (o HealthCheckOutput) ToHealthCheckPtrOutput() HealthCheckPtrOutput {
	return o.ToHealthCheckPtrOutputWithContext(context.Background())
}

func (o HealthCheckOutput) ToHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HealthCheck) *HealthCheck {
		return &v
	}).(HealthCheckPtrOutput)
}

func (o HealthCheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

func (o HealthCheckOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o HealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o HealthCheckOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheck) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

func (o HealthCheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type HealthCheckPtrOutput struct{ *pulumi.OutputState }

func (HealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheck)(nil)).Elem()
}

func (o HealthCheckPtrOutput) ToHealthCheckPtrOutput() HealthCheckPtrOutput {
	return o
}

func (o HealthCheckPtrOutput) ToHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckPtrOutput {
	return o
}

func (o HealthCheckPtrOutput) Elem() HealthCheckOutput {
	return o.ApplyT(func(v *HealthCheck) HealthCheck {
		if v != nil {
			return *v
		}
		var ret HealthCheck
		return ret
	}).(HealthCheckOutput)
}

func (o HealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

func (o HealthCheckPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o HealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o HealthCheckPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

func (o HealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

type IOTune struct {
	Iops float64 `pulumi:"iops"`
}

type IOTuneOutput struct{ *pulumi.OutputState }

func (IOTuneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IOTune)(nil)).Elem()
}

func (o IOTuneOutput) ToIOTuneOutput() IOTuneOutput {
	return o
}

func (o IOTuneOutput) ToIOTuneOutputWithContext(ctx context.Context) IOTuneOutput {
	return o
}

func (o IOTuneOutput) Iops() pulumi.Float64Output {
	return o.ApplyT(func(v IOTune) float64 { return v.Iops }).(pulumi.Float64Output)
}

type LetsEncrypt struct {
	Email   string `pulumi:"email"`
	Enabled bool   `pulumi:"enabled"`
}

// LetsEncryptInput is an input type that accepts LetsEncryptArgs and LetsEncryptOutput values.
// You can construct a concrete instance of `LetsEncryptInput` via:
//
//	LetsEncryptArgs{...}
type LetsEncryptInput interface {
	pulumi.Input

	ToLetsEncryptOutput() LetsEncryptOutput
	ToLetsEncryptOutputWithContext(context.Context) LetsEncryptOutput
}

type LetsEncryptArgs struct {
	Email   pulumi.StringInput `pulumi:"email"`
	Enabled pulumi.BoolInput   `pulumi:"enabled"`
}

func (LetsEncryptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LetsEncrypt)(nil)).Elem()
}

func (i LetsEncryptArgs) ToLetsEncryptOutput() LetsEncryptOutput {
	return i.ToLetsEncryptOutputWithContext(context.Background())
}

func (i LetsEncryptArgs) ToLetsEncryptOutputWithContext(ctx context.Context) LetsEncryptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LetsEncryptOutput)
}

type LetsEncryptOutput struct{ *pulumi.OutputState }

func (LetsEncryptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LetsEncrypt)(nil)).Elem()
}

func (o LetsEncryptOutput) ToLetsEncryptOutput() LetsEncryptOutput {
	return o
}

func (o LetsEncryptOutput) ToLetsEncryptOutputWithContext(ctx context.Context) LetsEncryptOutput {
	return o
}

func (o LetsEncryptOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LetsEncrypt) string { return v.Email }).(pulumi.StringOutput)
}

func (o LetsEncryptOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LetsEncrypt) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type NetworkInterface struct {
	Device_name            string `pulumi:"device_name"`
	External_cloudspace_id string `pulumi:"external_cloudspace_id"`
	Ip_address             string `pulumi:"ip_address"`
	Mac_address            string `pulumi:"mac_address"`
	Model                  string `pulumi:"model"`
	Network_id             int    `pulumi:"network_id"`
	Nic_type               string `pulumi:"nic_type"`
}

type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) Device_name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.Device_name }).(pulumi.StringOutput)
}

func (o NetworkInterfaceOutput) External_cloudspace_id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.External_cloudspace_id }).(pulumi.StringOutput)
}

func (o NetworkInterfaceOutput) Ip_address() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.Ip_address }).(pulumi.StringOutput)
}

func (o NetworkInterfaceOutput) Mac_address() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.Mac_address }).(pulumi.StringOutput)
}

func (o NetworkInterfaceOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.Model }).(pulumi.StringOutput)
}

func (o NetworkInterfaceOutput) Network_id() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkInterface) int { return v.Network_id }).(pulumi.IntOutput)
}

func (o NetworkInterfaceOutput) Nic_type() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.Nic_type }).(pulumi.StringOutput)
}

type NetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterface {
		return vs[0].([]NetworkInterface)[vs[1].(int)]
	}).(NetworkInterfaceOutput)
}

type Options struct {
	Health_check          *HealthCheck         `pulumi:"health_check"`
	Sticky_session_cookie *StickySessionCookie `pulumi:"sticky_session_cookie"`
}

// OptionsInput is an input type that accepts OptionsArgs and OptionsOutput values.
// You can construct a concrete instance of `OptionsInput` via:
//
//	OptionsArgs{...}
type OptionsInput interface {
	pulumi.Input

	ToOptionsOutput() OptionsOutput
	ToOptionsOutputWithContext(context.Context) OptionsOutput
}

type OptionsArgs struct {
	Health_check          HealthCheckPtrInput         `pulumi:"health_check"`
	Sticky_session_cookie StickySessionCookiePtrInput `pulumi:"sticky_session_cookie"`
}

func (OptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Options)(nil)).Elem()
}

func (i OptionsArgs) ToOptionsOutput() OptionsOutput {
	return i.ToOptionsOutputWithContext(context.Background())
}

func (i OptionsArgs) ToOptionsOutputWithContext(ctx context.Context) OptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionsOutput)
}

func (i OptionsArgs) ToOptionsPtrOutput() OptionsPtrOutput {
	return i.ToOptionsPtrOutputWithContext(context.Background())
}

func (i OptionsArgs) ToOptionsPtrOutputWithContext(ctx context.Context) OptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionsOutput).ToOptionsPtrOutputWithContext(ctx)
}

// OptionsPtrInput is an input type that accepts OptionsArgs, OptionsPtr and OptionsPtrOutput values.
// You can construct a concrete instance of `OptionsPtrInput` via:
//
//	        OptionsArgs{...}
//
//	or:
//
//	        nil
type OptionsPtrInput interface {
	pulumi.Input

	ToOptionsPtrOutput() OptionsPtrOutput
	ToOptionsPtrOutputWithContext(context.Context) OptionsPtrOutput
}

type optionsPtrType OptionsArgs

func OptionsPtr(v *OptionsArgs) OptionsPtrInput {
	return (*optionsPtrType)(v)
}

func (*optionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Options)(nil)).Elem()
}

func (i *optionsPtrType) ToOptionsPtrOutput() OptionsPtrOutput {
	return i.ToOptionsPtrOutputWithContext(context.Background())
}

func (i *optionsPtrType) ToOptionsPtrOutputWithContext(ctx context.Context) OptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionsPtrOutput)
}

type OptionsOutput struct{ *pulumi.OutputState }

func (OptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Options)(nil)).Elem()
}

func (o OptionsOutput) ToOptionsOutput() OptionsOutput {
	return o
}

func (o OptionsOutput) ToOptionsOutputWithContext(ctx context.Context) OptionsOutput {
	return o
}

func (o OptionsOutput) ToOptionsPtrOutput() OptionsPtrOutput {
	return o.ToOptionsPtrOutputWithContext(context.Background())
}

func (o OptionsOutput) ToOptionsPtrOutputWithContext(ctx context.Context) OptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Options) *Options {
		return &v
	}).(OptionsPtrOutput)
}

func (o OptionsOutput) Health_check() HealthCheckPtrOutput {
	return o.ApplyT(func(v Options) *HealthCheck { return v.Health_check }).(HealthCheckPtrOutput)
}

func (o OptionsOutput) Sticky_session_cookie() StickySessionCookiePtrOutput {
	return o.ApplyT(func(v Options) *StickySessionCookie { return v.Sticky_session_cookie }).(StickySessionCookiePtrOutput)
}

type OptionsPtrOutput struct{ *pulumi.OutputState }

func (OptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Options)(nil)).Elem()
}

func (o OptionsPtrOutput) ToOptionsPtrOutput() OptionsPtrOutput {
	return o
}

func (o OptionsPtrOutput) ToOptionsPtrOutputWithContext(ctx context.Context) OptionsPtrOutput {
	return o
}

func (o OptionsPtrOutput) Elem() OptionsOutput {
	return o.ApplyT(func(v *Options) Options {
		if v != nil {
			return *v
		}
		var ret Options
		return ret
	}).(OptionsOutput)
}

func (o OptionsPtrOutput) Health_check() HealthCheckPtrOutput {
	return o.ApplyT(func(v *Options) *HealthCheck {
		if v == nil {
			return nil
		}
		return v.Health_check
	}).(HealthCheckPtrOutput)
}

func (o OptionsPtrOutput) Sticky_session_cookie() StickySessionCookiePtrOutput {
	return o.ApplyT(func(v *Options) *StickySessionCookie {
		if v == nil {
			return nil
		}
		return v.Sticky_session_cookie
	}).(StickySessionCookiePtrOutput)
}

type OsAccount struct {
	Login    string `pulumi:"login"`
	Password string `pulumi:"password"`
}

type OsAccountOutput struct{ *pulumi.OutputState }

func (OsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsAccount)(nil)).Elem()
}

func (o OsAccountOutput) ToOsAccountOutput() OsAccountOutput {
	return o
}

func (o OsAccountOutput) ToOsAccountOutputWithContext(ctx context.Context) OsAccountOutput {
	return o
}

func (o OsAccountOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v OsAccount) string { return v.Login }).(pulumi.StringOutput)
}

func (o OsAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v OsAccount) string { return v.Password }).(pulumi.StringOutput)
}

type OsAccountArrayOutput struct{ *pulumi.OutputState }

func (OsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OsAccount)(nil)).Elem()
}

func (o OsAccountArrayOutput) ToOsAccountArrayOutput() OsAccountArrayOutput {
	return o
}

func (o OsAccountArrayOutput) ToOsAccountArrayOutputWithContext(ctx context.Context) OsAccountArrayOutput {
	return o
}

func (o OsAccountArrayOutput) Index(i pulumi.IntInput) OsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OsAccount {
		return vs[0].([]OsAccount)[vs[1].(int)]
	}).(OsAccountOutput)
}

type ResourceLimits struct {
	External_network_quota float64 `pulumi:"external_network_quota"`
	Memory_quota           float64 `pulumi:"memory_quota"`
	Public_ip_quota        float64 `pulumi:"public_ip_quota"`
	Vcpu_quota             float64 `pulumi:"vcpu_quota"`
	Vdisk_space_quota      float64 `pulumi:"vdisk_space_quota"`
}

type ResourceLimitsOutput struct{ *pulumi.OutputState }

func (ResourceLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimits)(nil)).Elem()
}

func (o ResourceLimitsOutput) ToResourceLimitsOutput() ResourceLimitsOutput {
	return o
}

func (o ResourceLimitsOutput) ToResourceLimitsOutputWithContext(ctx context.Context) ResourceLimitsOutput {
	return o
}

func (o ResourceLimitsOutput) External_network_quota() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceLimits) float64 { return v.External_network_quota }).(pulumi.Float64Output)
}

func (o ResourceLimitsOutput) Memory_quota() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceLimits) float64 { return v.Memory_quota }).(pulumi.Float64Output)
}

func (o ResourceLimitsOutput) Public_ip_quota() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceLimits) float64 { return v.Public_ip_quota }).(pulumi.Float64Output)
}

func (o ResourceLimitsOutput) Vcpu_quota() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceLimits) float64 { return v.Vcpu_quota }).(pulumi.Float64Output)
}

func (o ResourceLimitsOutput) Vdisk_space_quota() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceLimits) float64 { return v.Vdisk_space_quota }).(pulumi.Float64Output)
}

type ReverseProxyBackend struct {
	Options       *Options `pulumi:"options"`
	Scheme        string   `pulumi:"scheme"`
	Serverpool_id string   `pulumi:"serverpool_id"`
	Target_port   int      `pulumi:"target_port"`
}

// ReverseProxyBackendInput is an input type that accepts ReverseProxyBackendArgs and ReverseProxyBackendOutput values.
// You can construct a concrete instance of `ReverseProxyBackendInput` via:
//
//	ReverseProxyBackendArgs{...}
type ReverseProxyBackendInput interface {
	pulumi.Input

	ToReverseProxyBackendOutput() ReverseProxyBackendOutput
	ToReverseProxyBackendOutputWithContext(context.Context) ReverseProxyBackendOutput
}

type ReverseProxyBackendArgs struct {
	Options       OptionsPtrInput    `pulumi:"options"`
	Scheme        pulumi.StringInput `pulumi:"scheme"`
	Serverpool_id pulumi.StringInput `pulumi:"serverpool_id"`
	Target_port   pulumi.IntInput    `pulumi:"target_port"`
}

func (ReverseProxyBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReverseProxyBackend)(nil)).Elem()
}

func (i ReverseProxyBackendArgs) ToReverseProxyBackendOutput() ReverseProxyBackendOutput {
	return i.ToReverseProxyBackendOutputWithContext(context.Background())
}

func (i ReverseProxyBackendArgs) ToReverseProxyBackendOutputWithContext(ctx context.Context) ReverseProxyBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseProxyBackendOutput)
}

type ReverseProxyBackendOutput struct{ *pulumi.OutputState }

func (ReverseProxyBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReverseProxyBackend)(nil)).Elem()
}

func (o ReverseProxyBackendOutput) ToReverseProxyBackendOutput() ReverseProxyBackendOutput {
	return o
}

func (o ReverseProxyBackendOutput) ToReverseProxyBackendOutputWithContext(ctx context.Context) ReverseProxyBackendOutput {
	return o
}

func (o ReverseProxyBackendOutput) Options() OptionsPtrOutput {
	return o.ApplyT(func(v ReverseProxyBackend) *Options { return v.Options }).(OptionsPtrOutput)
}

func (o ReverseProxyBackendOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v ReverseProxyBackend) string { return v.Scheme }).(pulumi.StringOutput)
}

func (o ReverseProxyBackendOutput) Serverpool_id() pulumi.StringOutput {
	return o.ApplyT(func(v ReverseProxyBackend) string { return v.Serverpool_id }).(pulumi.StringOutput)
}

func (o ReverseProxyBackendOutput) Target_port() pulumi.IntOutput {
	return o.ApplyT(func(v ReverseProxyBackend) int { return v.Target_port }).(pulumi.IntOutput)
}

type ReverseProxyFrontEnd struct {
	Domain      string      `pulumi:"domain"`
	Http_port   *int        `pulumi:"http_port"`
	Https_port  *int        `pulumi:"https_port"`
	Ip_address  *string     `pulumi:"ip_address"`
	Letsencrypt LetsEncrypt `pulumi:"letsencrypt"`
	Scheme      string      `pulumi:"scheme"`
}

// ReverseProxyFrontEndInput is an input type that accepts ReverseProxyFrontEndArgs and ReverseProxyFrontEndOutput values.
// You can construct a concrete instance of `ReverseProxyFrontEndInput` via:
//
//	ReverseProxyFrontEndArgs{...}
type ReverseProxyFrontEndInput interface {
	pulumi.Input

	ToReverseProxyFrontEndOutput() ReverseProxyFrontEndOutput
	ToReverseProxyFrontEndOutputWithContext(context.Context) ReverseProxyFrontEndOutput
}

type ReverseProxyFrontEndArgs struct {
	Domain      pulumi.StringInput    `pulumi:"domain"`
	Http_port   pulumi.IntPtrInput    `pulumi:"http_port"`
	Https_port  pulumi.IntPtrInput    `pulumi:"https_port"`
	Ip_address  pulumi.StringPtrInput `pulumi:"ip_address"`
	Letsencrypt LetsEncryptInput      `pulumi:"letsencrypt"`
	Scheme      pulumi.StringInput    `pulumi:"scheme"`
}

func (ReverseProxyFrontEndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReverseProxyFrontEnd)(nil)).Elem()
}

func (i ReverseProxyFrontEndArgs) ToReverseProxyFrontEndOutput() ReverseProxyFrontEndOutput {
	return i.ToReverseProxyFrontEndOutputWithContext(context.Background())
}

func (i ReverseProxyFrontEndArgs) ToReverseProxyFrontEndOutputWithContext(ctx context.Context) ReverseProxyFrontEndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseProxyFrontEndOutput)
}

type ReverseProxyFrontEndOutput struct{ *pulumi.OutputState }

func (ReverseProxyFrontEndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReverseProxyFrontEnd)(nil)).Elem()
}

func (o ReverseProxyFrontEndOutput) ToReverseProxyFrontEndOutput() ReverseProxyFrontEndOutput {
	return o
}

func (o ReverseProxyFrontEndOutput) ToReverseProxyFrontEndOutputWithContext(ctx context.Context) ReverseProxyFrontEndOutput {
	return o
}

func (o ReverseProxyFrontEndOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v ReverseProxyFrontEnd) string { return v.Domain }).(pulumi.StringOutput)
}

func (o ReverseProxyFrontEndOutput) Http_port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReverseProxyFrontEnd) *int { return v.Http_port }).(pulumi.IntPtrOutput)
}

func (o ReverseProxyFrontEndOutput) Https_port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReverseProxyFrontEnd) *int { return v.Https_port }).(pulumi.IntPtrOutput)
}

func (o ReverseProxyFrontEndOutput) Ip_address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReverseProxyFrontEnd) *string { return v.Ip_address }).(pulumi.StringPtrOutput)
}

func (o ReverseProxyFrontEndOutput) Letsencrypt() LetsEncryptOutput {
	return o.ApplyT(func(v ReverseProxyFrontEnd) LetsEncrypt { return v.Letsencrypt }).(LetsEncryptOutput)
}

func (o ReverseProxyFrontEndOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v ReverseProxyFrontEnd) string { return v.Scheme }).(pulumi.StringOutput)
}

type ServerPoolHost struct {
	Address string `pulumi:"address"`
	Host_id string `pulumi:"host_id"`
}

type ServerPoolHostOutput struct{ *pulumi.OutputState }

func (ServerPoolHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPoolHost)(nil)).Elem()
}

func (o ServerPoolHostOutput) ToServerPoolHostOutput() ServerPoolHostOutput {
	return o
}

func (o ServerPoolHostOutput) ToServerPoolHostOutputWithContext(ctx context.Context) ServerPoolHostOutput {
	return o
}

func (o ServerPoolHostOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPoolHost) string { return v.Address }).(pulumi.StringOutput)
}

func (o ServerPoolHostOutput) Host_id() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPoolHost) string { return v.Host_id }).(pulumi.StringOutput)
}

type ServerPoolHostArrayOutput struct{ *pulumi.OutputState }

func (ServerPoolHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPoolHost)(nil)).Elem()
}

func (o ServerPoolHostArrayOutput) ToServerPoolHostArrayOutput() ServerPoolHostArrayOutput {
	return o
}

func (o ServerPoolHostArrayOutput) ToServerPoolHostArrayOutputWithContext(ctx context.Context) ServerPoolHostArrayOutput {
	return o
}

func (o ServerPoolHostArrayOutput) Index(i pulumi.IntInput) ServerPoolHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerPoolHost {
		return vs[0].([]ServerPoolHost)[vs[1].(int)]
	}).(ServerPoolHostOutput)
}

type StickySessionCookie struct {
	Http_only *bool   `pulumi:"http_only"`
	Name      *string `pulumi:"name"`
	Same_site *string `pulumi:"same_site"`
	Secure    *bool   `pulumi:"secure"`
}

// StickySessionCookieInput is an input type that accepts StickySessionCookieArgs and StickySessionCookieOutput values.
// You can construct a concrete instance of `StickySessionCookieInput` via:
//
//	StickySessionCookieArgs{...}
type StickySessionCookieInput interface {
	pulumi.Input

	ToStickySessionCookieOutput() StickySessionCookieOutput
	ToStickySessionCookieOutputWithContext(context.Context) StickySessionCookieOutput
}

type StickySessionCookieArgs struct {
	Http_only pulumi.BoolPtrInput   `pulumi:"http_only"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Same_site pulumi.StringPtrInput `pulumi:"same_site"`
	Secure    pulumi.BoolPtrInput   `pulumi:"secure"`
}

func (StickySessionCookieArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StickySessionCookie)(nil)).Elem()
}

func (i StickySessionCookieArgs) ToStickySessionCookieOutput() StickySessionCookieOutput {
	return i.ToStickySessionCookieOutputWithContext(context.Background())
}

func (i StickySessionCookieArgs) ToStickySessionCookieOutputWithContext(ctx context.Context) StickySessionCookieOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StickySessionCookieOutput)
}

func (i StickySessionCookieArgs) ToStickySessionCookiePtrOutput() StickySessionCookiePtrOutput {
	return i.ToStickySessionCookiePtrOutputWithContext(context.Background())
}

func (i StickySessionCookieArgs) ToStickySessionCookiePtrOutputWithContext(ctx context.Context) StickySessionCookiePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StickySessionCookieOutput).ToStickySessionCookiePtrOutputWithContext(ctx)
}

// StickySessionCookiePtrInput is an input type that accepts StickySessionCookieArgs, StickySessionCookiePtr and StickySessionCookiePtrOutput values.
// You can construct a concrete instance of `StickySessionCookiePtrInput` via:
//
//	        StickySessionCookieArgs{...}
//
//	or:
//
//	        nil
type StickySessionCookiePtrInput interface {
	pulumi.Input

	ToStickySessionCookiePtrOutput() StickySessionCookiePtrOutput
	ToStickySessionCookiePtrOutputWithContext(context.Context) StickySessionCookiePtrOutput
}

type stickySessionCookiePtrType StickySessionCookieArgs

func StickySessionCookiePtr(v *StickySessionCookieArgs) StickySessionCookiePtrInput {
	return (*stickySessionCookiePtrType)(v)
}

func (*stickySessionCookiePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StickySessionCookie)(nil)).Elem()
}

func (i *stickySessionCookiePtrType) ToStickySessionCookiePtrOutput() StickySessionCookiePtrOutput {
	return i.ToStickySessionCookiePtrOutputWithContext(context.Background())
}

func (i *stickySessionCookiePtrType) ToStickySessionCookiePtrOutputWithContext(ctx context.Context) StickySessionCookiePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StickySessionCookiePtrOutput)
}

type StickySessionCookieOutput struct{ *pulumi.OutputState }

func (StickySessionCookieOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StickySessionCookie)(nil)).Elem()
}

func (o StickySessionCookieOutput) ToStickySessionCookieOutput() StickySessionCookieOutput {
	return o
}

func (o StickySessionCookieOutput) ToStickySessionCookieOutputWithContext(ctx context.Context) StickySessionCookieOutput {
	return o
}

func (o StickySessionCookieOutput) ToStickySessionCookiePtrOutput() StickySessionCookiePtrOutput {
	return o.ToStickySessionCookiePtrOutputWithContext(context.Background())
}

func (o StickySessionCookieOutput) ToStickySessionCookiePtrOutputWithContext(ctx context.Context) StickySessionCookiePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StickySessionCookie) *StickySessionCookie {
		return &v
	}).(StickySessionCookiePtrOutput)
}

func (o StickySessionCookieOutput) Http_only() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StickySessionCookie) *bool { return v.Http_only }).(pulumi.BoolPtrOutput)
}

func (o StickySessionCookieOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StickySessionCookie) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o StickySessionCookieOutput) Same_site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StickySessionCookie) *string { return v.Same_site }).(pulumi.StringPtrOutput)
}

func (o StickySessionCookieOutput) Secure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StickySessionCookie) *bool { return v.Secure }).(pulumi.BoolPtrOutput)
}

type StickySessionCookiePtrOutput struct{ *pulumi.OutputState }

func (StickySessionCookiePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StickySessionCookie)(nil)).Elem()
}

func (o StickySessionCookiePtrOutput) ToStickySessionCookiePtrOutput() StickySessionCookiePtrOutput {
	return o
}

func (o StickySessionCookiePtrOutput) ToStickySessionCookiePtrOutputWithContext(ctx context.Context) StickySessionCookiePtrOutput {
	return o
}

func (o StickySessionCookiePtrOutput) Elem() StickySessionCookieOutput {
	return o.ApplyT(func(v *StickySessionCookie) StickySessionCookie {
		if v != nil {
			return *v
		}
		var ret StickySessionCookie
		return ret
	}).(StickySessionCookieOutput)
}

func (o StickySessionCookiePtrOutput) Http_only() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StickySessionCookie) *bool {
		if v == nil {
			return nil
		}
		return v.Http_only
	}).(pulumi.BoolPtrOutput)
}

func (o StickySessionCookiePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StickySessionCookie) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o StickySessionCookiePtrOutput) Same_site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StickySessionCookie) *string {
		if v == nil {
			return nil
		}
		return v.Same_site
	}).(pulumi.StringPtrOutput)
}

func (o StickySessionCookiePtrOutput) Secure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StickySessionCookie) *bool {
		if v == nil {
			return nil
		}
		return v.Secure
	}).(pulumi.BoolPtrOutput)
}

type TLS struct {
	Domain          *string `pulumi:"domain"`
	Is_enabled      *bool   `pulumi:"is_enabled"`
	Tls_termination *bool   `pulumi:"tls_termination"`
}

type TLSOutput struct{ *pulumi.OutputState }

func (TLSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TLS)(nil)).Elem()
}

func (o TLSOutput) ToTLSOutput() TLSOutput {
	return o
}

func (o TLSOutput) ToTLSOutputWithContext(ctx context.Context) TLSOutput {
	return o
}

func (o TLSOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLS) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o TLSOutput) Is_enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TLS) *bool { return v.Is_enabled }).(pulumi.BoolPtrOutput)
}

func (o TLSOutput) Tls_termination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TLS) *bool { return v.Tls_termination }).(pulumi.BoolPtrOutput)
}

type TLSPtrOutput struct{ *pulumi.OutputState }

func (TLSPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TLS)(nil)).Elem()
}

func (o TLSPtrOutput) ToTLSPtrOutput() TLSPtrOutput {
	return o
}

func (o TLSPtrOutput) ToTLSPtrOutputWithContext(ctx context.Context) TLSPtrOutput {
	return o
}

func (o TLSPtrOutput) Elem() TLSOutput {
	return o.ApplyT(func(v *TLS) TLS {
		if v != nil {
			return *v
		}
		var ret TLS
		return ret
	}).(TLSOutput)
}

func (o TLSPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLS) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o TLSPtrOutput) Is_enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TLS) *bool {
		if v == nil {
			return nil
		}
		return v.Is_enabled
	}).(pulumi.BoolPtrOutput)
}

func (o TLSPtrOutput) Tls_termination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TLS) *bool {
		if v == nil {
			return nil
		}
		return v.Tls_termination
	}).(pulumi.BoolPtrOutput)
}

type VmDisk struct {
	Description string `pulumi:"description"`
	Disk_id     int    `pulumi:"disk_id"`
	Disk_name   string `pulumi:"disk_name"`
	Disk_size   int    `pulumi:"disk_size"`
	Disk_type   string `pulumi:"disk_type"`
	Exposed     bool   `pulumi:"exposed"`
	Order       string `pulumi:"order"`
	Pci_bus     int    `pulumi:"pci_bus"`
	Pci_slot    int    `pulumi:"pci_slot"`
	Status      string `pulumi:"status"`
}

type VmDiskOutput struct{ *pulumi.OutputState }

func (VmDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmDisk)(nil)).Elem()
}

func (o VmDiskOutput) ToVmDiskOutput() VmDiskOutput {
	return o
}

func (o VmDiskOutput) ToVmDiskOutputWithContext(ctx context.Context) VmDiskOutput {
	return o
}

func (o VmDiskOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v VmDisk) string { return v.Description }).(pulumi.StringOutput)
}

func (o VmDiskOutput) Disk_id() pulumi.IntOutput {
	return o.ApplyT(func(v VmDisk) int { return v.Disk_id }).(pulumi.IntOutput)
}

func (o VmDiskOutput) Disk_name() pulumi.StringOutput {
	return o.ApplyT(func(v VmDisk) string { return v.Disk_name }).(pulumi.StringOutput)
}

func (o VmDiskOutput) Disk_size() pulumi.IntOutput {
	return o.ApplyT(func(v VmDisk) int { return v.Disk_size }).(pulumi.IntOutput)
}

func (o VmDiskOutput) Disk_type() pulumi.StringOutput {
	return o.ApplyT(func(v VmDisk) string { return v.Disk_type }).(pulumi.StringOutput)
}

func (o VmDiskOutput) Exposed() pulumi.BoolOutput {
	return o.ApplyT(func(v VmDisk) bool { return v.Exposed }).(pulumi.BoolOutput)
}

func (o VmDiskOutput) Order() pulumi.StringOutput {
	return o.ApplyT(func(v VmDisk) string { return v.Order }).(pulumi.StringOutput)
}

func (o VmDiskOutput) Pci_bus() pulumi.IntOutput {
	return o.ApplyT(func(v VmDisk) int { return v.Pci_bus }).(pulumi.IntOutput)
}

func (o VmDiskOutput) Pci_slot() pulumi.IntOutput {
	return o.ApplyT(func(v VmDisk) int { return v.Pci_slot }).(pulumi.IntOutput)
}

func (o VmDiskOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v VmDisk) string { return v.Status }).(pulumi.StringOutput)
}

type VmDiskArrayOutput struct{ *pulumi.OutputState }

func (VmDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmDisk)(nil)).Elem()
}

func (o VmDiskArrayOutput) ToVmDiskArrayOutput() VmDiskArrayOutput {
	return o
}

func (o VmDiskArrayOutput) ToVmDiskArrayOutputWithContext(ctx context.Context) VmDiskArrayOutput {
	return o
}

func (o VmDiskArrayOutput) Index(i pulumi.IntInput) VmDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmDisk {
		return vs[0].([]VmDisk)[vs[1].(int)]
	}).(VmDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallCustomInput)(nil)).Elem(), FirewallCustomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallCustomPtrInput)(nil)).Elem(), FirewallCustomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthCheckInput)(nil)).Elem(), HealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthCheckPtrInput)(nil)).Elem(), HealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LetsEncryptInput)(nil)).Elem(), LetsEncryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OptionsInput)(nil)).Elem(), OptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OptionsPtrInput)(nil)).Elem(), OptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseProxyBackendInput)(nil)).Elem(), ReverseProxyBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseProxyFrontEndInput)(nil)).Elem(), ReverseProxyFrontEndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StickySessionCookieInput)(nil)).Elem(), StickySessionCookieArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StickySessionCookiePtrInput)(nil)).Elem(), StickySessionCookieArgs{})
	pulumi.RegisterOutputType(BackEndStateOutput{})
	pulumi.RegisterOutputType(CpuTopologyOutput{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(FirewallCustomOutput{})
	pulumi.RegisterOutputType(FirewallCustomPtrOutput{})
	pulumi.RegisterOutputType(FrontEndOutput{})
	pulumi.RegisterOutputType(HealthCheckOutput{})
	pulumi.RegisterOutputType(HealthCheckPtrOutput{})
	pulumi.RegisterOutputType(IOTuneOutput{})
	pulumi.RegisterOutputType(LetsEncryptOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(OptionsOutput{})
	pulumi.RegisterOutputType(OptionsPtrOutput{})
	pulumi.RegisterOutputType(OsAccountOutput{})
	pulumi.RegisterOutputType(OsAccountArrayOutput{})
	pulumi.RegisterOutputType(ResourceLimitsOutput{})
	pulumi.RegisterOutputType(ReverseProxyBackendOutput{})
	pulumi.RegisterOutputType(ReverseProxyFrontEndOutput{})
	pulumi.RegisterOutputType(ServerPoolHostOutput{})
	pulumi.RegisterOutputType(ServerPoolHostArrayOutput{})
	pulumi.RegisterOutputType(StickySessionCookieOutput{})
	pulumi.RegisterOutputType(StickySessionCookiePtrOutput{})
	pulumi.RegisterOutputType(TLSOutput{})
	pulumi.RegisterOutputType(TLSPtrOutput{})
	pulumi.RegisterOutputType(VmDiskOutput{})
	pulumi.RegisterOutputType(VmDiskArrayOutput{})
}
