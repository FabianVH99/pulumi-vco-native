// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ingress

import (
	"context"
	"reflect"

	"errors"
	"github.com/fabianv-cloud/pulumi-vco-native/sdk/go/command/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReverseProxy struct {
	pulumi.CustomResourceState

	Back_end        ReverseProxyBackendOutput  `pulumi:"back_end"`
	Cloudspace_id   pulumi.StringOutput        `pulumi:"cloudspace_id"`
	CustomerID      pulumi.StringOutput        `pulumi:"customerID"`
	Description     pulumi.StringOutput        `pulumi:"description"`
	Front_end       ReverseProxyFrontEndOutput `pulumi:"front_end"`
	Name            pulumi.StringOutput        `pulumi:"name"`
	Reverseproxy_id pulumi.StringOutput        `pulumi:"reverseproxy_id"`
	Token           pulumi.StringOutput        `pulumi:"token"`
	Type            pulumi.StringOutput        `pulumi:"type"`
	Url             pulumi.StringOutput        `pulumi:"url"`
}

// NewReverseProxy registers a new resource with the given unique name, arguments, and options.
func NewReverseProxy(ctx *pulumi.Context,
	name string, args *ReverseProxyArgs, opts ...pulumi.ResourceOption) (*ReverseProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Back_end == nil {
		return nil, errors.New("invalid value for required argument 'Back_end'")
	}
	if args.Cloudspace_id == nil {
		return nil, errors.New("invalid value for required argument 'Cloudspace_id'")
	}
	if args.CustomerID == nil {
		return nil, errors.New("invalid value for required argument 'CustomerID'")
	}
	if args.Front_end == nil {
		return nil, errors.New("invalid value for required argument 'Front_end'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.CustomerID != nil {
		args.CustomerID = pulumi.ToSecret(args.CustomerID).(pulumi.StringInput)
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringInput)
	}
	if args.Url != nil {
		args.Url = pulumi.ToSecret(args.Url).(pulumi.StringInput)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReverseProxy
	err := ctx.RegisterResource("vco:ingress:ReverseProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReverseProxy gets an existing ReverseProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReverseProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReverseProxyState, opts ...pulumi.ResourceOption) (*ReverseProxy, error) {
	var resource ReverseProxy
	err := ctx.ReadResource("vco:ingress:ReverseProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReverseProxy resources.
type reverseProxyState struct {
}

type ReverseProxyState struct {
}

func (ReverseProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*reverseProxyState)(nil)).Elem()
}

type reverseProxyArgs struct {
	Back_end      ReverseProxyBackend  `pulumi:"back_end"`
	Cloudspace_id string               `pulumi:"cloudspace_id"`
	CustomerID    string               `pulumi:"customerID"`
	Description   *string              `pulumi:"description"`
	Front_end     ReverseProxyFrontEnd `pulumi:"front_end"`
	Name          string               `pulumi:"name"`
	Token         string               `pulumi:"token"`
	Url           string               `pulumi:"url"`
}

// The set of arguments for constructing a ReverseProxy resource.
type ReverseProxyArgs struct {
	Back_end      ReverseProxyBackendInput
	Cloudspace_id pulumi.StringInput
	CustomerID    pulumi.StringInput
	Description   pulumi.StringPtrInput
	Front_end     ReverseProxyFrontEndInput
	Name          pulumi.StringInput
	Token         pulumi.StringInput
	Url           pulumi.StringInput
}

func (ReverseProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reverseProxyArgs)(nil)).Elem()
}

type ReverseProxyInput interface {
	pulumi.Input

	ToReverseProxyOutput() ReverseProxyOutput
	ToReverseProxyOutputWithContext(ctx context.Context) ReverseProxyOutput
}

func (*ReverseProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**ReverseProxy)(nil)).Elem()
}

func (i *ReverseProxy) ToReverseProxyOutput() ReverseProxyOutput {
	return i.ToReverseProxyOutputWithContext(context.Background())
}

func (i *ReverseProxy) ToReverseProxyOutputWithContext(ctx context.Context) ReverseProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseProxyOutput)
}

// ReverseProxyArrayInput is an input type that accepts ReverseProxyArray and ReverseProxyArrayOutput values.
// You can construct a concrete instance of `ReverseProxyArrayInput` via:
//
//	ReverseProxyArray{ ReverseProxyArgs{...} }
type ReverseProxyArrayInput interface {
	pulumi.Input

	ToReverseProxyArrayOutput() ReverseProxyArrayOutput
	ToReverseProxyArrayOutputWithContext(context.Context) ReverseProxyArrayOutput
}

type ReverseProxyArray []ReverseProxyInput

func (ReverseProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReverseProxy)(nil)).Elem()
}

func (i ReverseProxyArray) ToReverseProxyArrayOutput() ReverseProxyArrayOutput {
	return i.ToReverseProxyArrayOutputWithContext(context.Background())
}

func (i ReverseProxyArray) ToReverseProxyArrayOutputWithContext(ctx context.Context) ReverseProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseProxyArrayOutput)
}

// ReverseProxyMapInput is an input type that accepts ReverseProxyMap and ReverseProxyMapOutput values.
// You can construct a concrete instance of `ReverseProxyMapInput` via:
//
//	ReverseProxyMap{ "key": ReverseProxyArgs{...} }
type ReverseProxyMapInput interface {
	pulumi.Input

	ToReverseProxyMapOutput() ReverseProxyMapOutput
	ToReverseProxyMapOutputWithContext(context.Context) ReverseProxyMapOutput
}

type ReverseProxyMap map[string]ReverseProxyInput

func (ReverseProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReverseProxy)(nil)).Elem()
}

func (i ReverseProxyMap) ToReverseProxyMapOutput() ReverseProxyMapOutput {
	return i.ToReverseProxyMapOutputWithContext(context.Background())
}

func (i ReverseProxyMap) ToReverseProxyMapOutputWithContext(ctx context.Context) ReverseProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseProxyMapOutput)
}

type ReverseProxyOutput struct{ *pulumi.OutputState }

func (ReverseProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReverseProxy)(nil)).Elem()
}

func (o ReverseProxyOutput) ToReverseProxyOutput() ReverseProxyOutput {
	return o
}

func (o ReverseProxyOutput) ToReverseProxyOutputWithContext(ctx context.Context) ReverseProxyOutput {
	return o
}

func (o ReverseProxyOutput) Back_end() ReverseProxyBackendOutput {
	return o.ApplyT(func(v *ReverseProxy) ReverseProxyBackendOutput { return v.Back_end }).(ReverseProxyBackendOutput)
}

func (o ReverseProxyOutput) Cloudspace_id() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseProxy) pulumi.StringOutput { return v.Cloudspace_id }).(pulumi.StringOutput)
}

func (o ReverseProxyOutput) CustomerID() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseProxy) pulumi.StringOutput { return v.CustomerID }).(pulumi.StringOutput)
}

func (o ReverseProxyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseProxy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ReverseProxyOutput) Front_end() ReverseProxyFrontEndOutput {
	return o.ApplyT(func(v *ReverseProxy) ReverseProxyFrontEndOutput { return v.Front_end }).(ReverseProxyFrontEndOutput)
}

func (o ReverseProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReverseProxyOutput) Reverseproxy_id() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseProxy) pulumi.StringOutput { return v.Reverseproxy_id }).(pulumi.StringOutput)
}

func (o ReverseProxyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseProxy) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

func (o ReverseProxyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseProxy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o ReverseProxyOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseProxy) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ReverseProxyArrayOutput struct{ *pulumi.OutputState }

func (ReverseProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReverseProxy)(nil)).Elem()
}

func (o ReverseProxyArrayOutput) ToReverseProxyArrayOutput() ReverseProxyArrayOutput {
	return o
}

func (o ReverseProxyArrayOutput) ToReverseProxyArrayOutputWithContext(ctx context.Context) ReverseProxyArrayOutput {
	return o
}

func (o ReverseProxyArrayOutput) Index(i pulumi.IntInput) ReverseProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReverseProxy {
		return vs[0].([]*ReverseProxy)[vs[1].(int)]
	}).(ReverseProxyOutput)
}

type ReverseProxyMapOutput struct{ *pulumi.OutputState }

func (ReverseProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReverseProxy)(nil)).Elem()
}

func (o ReverseProxyMapOutput) ToReverseProxyMapOutput() ReverseProxyMapOutput {
	return o
}

func (o ReverseProxyMapOutput) ToReverseProxyMapOutputWithContext(ctx context.Context) ReverseProxyMapOutput {
	return o
}

func (o ReverseProxyMapOutput) MapIndex(k pulumi.StringInput) ReverseProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReverseProxy {
		return vs[0].(map[string]*ReverseProxy)[vs[1].(string)]
	}).(ReverseProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseProxyInput)(nil)).Elem(), &ReverseProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseProxyArrayInput)(nil)).Elem(), ReverseProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseProxyMapInput)(nil)).Elem(), ReverseProxyMap{})
	pulumi.RegisterOutputType(ReverseProxyOutput{})
	pulumi.RegisterOutputType(ReverseProxyArrayOutput{})
	pulumi.RegisterOutputType(ReverseProxyMapOutput{})
}
