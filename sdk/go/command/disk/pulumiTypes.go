// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package disk

import (
	"context"
	"reflect"

	"github.com/fabianv-cloud/pulumi-vco-native/sdk/go/command/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Endpoint struct {
	Address         string `pulumi:"address"`
	Name            string `pulumi:"name"`
	Port            int    `pulumi:"port"`
	Private_address string `pulumi:"private_address"`
	Private_port    int    `pulumi:"private_port"`
	Psk             string `pulumi:"psk"`
	User            string `pulumi:"user"`
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func (o EndpointOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Endpoint) string { return v.Address }).(pulumi.StringOutput)
}

func (o EndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Endpoint) string { return v.Name }).(pulumi.StringOutput)
}

func (o EndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Endpoint) int { return v.Port }).(pulumi.IntOutput)
}

func (o EndpointOutput) Private_address() pulumi.StringOutput {
	return o.ApplyT(func(v Endpoint) string { return v.Private_address }).(pulumi.StringOutput)
}

func (o EndpointOutput) Private_port() pulumi.IntOutput {
	return o.ApplyT(func(v Endpoint) int { return v.Private_port }).(pulumi.IntOutput)
}

func (o EndpointOutput) Psk() pulumi.StringOutput {
	return o.ApplyT(func(v Endpoint) string { return v.Psk }).(pulumi.StringOutput)
}

func (o EndpointOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Endpoint) string { return v.User }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EndpointOutput{})
}
