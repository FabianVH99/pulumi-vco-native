// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudspace

import (
	"context"
	"reflect"

	"github.com/fabianv-cloud/pulumi-vco-native/sdk/go/command/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CpuTopology struct {
	Cores   int `pulumi:"cores"`
	Sockets int `pulumi:"sockets"`
	Threads int `pulumi:"threads"`
}

type CpuTopologyOutput struct{ *pulumi.OutputState }

func (CpuTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CpuTopology)(nil)).Elem()
}

func (o CpuTopologyOutput) ToCpuTopologyOutput() CpuTopologyOutput {
	return o
}

func (o CpuTopologyOutput) ToCpuTopologyOutputWithContext(ctx context.Context) CpuTopologyOutput {
	return o
}

func (o CpuTopologyOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v CpuTopology) int { return v.Cores }).(pulumi.IntOutput)
}

func (o CpuTopologyOutput) Sockets() pulumi.IntOutput {
	return o.ApplyT(func(v CpuTopology) int { return v.Sockets }).(pulumi.IntOutput)
}

func (o CpuTopologyOutput) Threads() pulumi.IntOutput {
	return o.ApplyT(func(v CpuTopology) int { return v.Threads }).(pulumi.IntOutput)
}

type NetworkInterface struct {
	Device_name            string `pulumi:"device_name"`
	External_cloudspace_id string `pulumi:"external_cloudspace_id"`
	Ip_address             string `pulumi:"ip_address"`
	Mac_address            string `pulumi:"mac_address"`
	Model                  string `pulumi:"model"`
	Network_id             int    `pulumi:"network_id"`
	Nic_type               string `pulumi:"nic_type"`
}

type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) Device_name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.Device_name }).(pulumi.StringOutput)
}

func (o NetworkInterfaceOutput) External_cloudspace_id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.External_cloudspace_id }).(pulumi.StringOutput)
}

func (o NetworkInterfaceOutput) Ip_address() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.Ip_address }).(pulumi.StringOutput)
}

func (o NetworkInterfaceOutput) Mac_address() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.Mac_address }).(pulumi.StringOutput)
}

func (o NetworkInterfaceOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.Model }).(pulumi.StringOutput)
}

func (o NetworkInterfaceOutput) Network_id() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkInterface) int { return v.Network_id }).(pulumi.IntOutput)
}

func (o NetworkInterfaceOutput) Nic_type() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterface) string { return v.Nic_type }).(pulumi.StringOutput)
}

type NetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterface {
		return vs[0].([]NetworkInterface)[vs[1].(int)]
	}).(NetworkInterfaceOutput)
}

type OsAccount struct {
	Login    string `pulumi:"login"`
	Password string `pulumi:"password"`
}

type OsAccountOutput struct{ *pulumi.OutputState }

func (OsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsAccount)(nil)).Elem()
}

func (o OsAccountOutput) ToOsAccountOutput() OsAccountOutput {
	return o
}

func (o OsAccountOutput) ToOsAccountOutputWithContext(ctx context.Context) OsAccountOutput {
	return o
}

func (o OsAccountOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v OsAccount) string { return v.Login }).(pulumi.StringOutput)
}

func (o OsAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v OsAccount) string { return v.Password }).(pulumi.StringOutput)
}

type OsAccountArrayOutput struct{ *pulumi.OutputState }

func (OsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OsAccount)(nil)).Elem()
}

func (o OsAccountArrayOutput) ToOsAccountArrayOutput() OsAccountArrayOutput {
	return o
}

func (o OsAccountArrayOutput) ToOsAccountArrayOutputWithContext(ctx context.Context) OsAccountArrayOutput {
	return o
}

func (o OsAccountArrayOutput) Index(i pulumi.IntInput) OsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OsAccount {
		return vs[0].([]OsAccount)[vs[1].(int)]
	}).(OsAccountOutput)
}

type VmDisk struct {
	Description string `pulumi:"description"`
	Disk_id     int    `pulumi:"disk_id"`
	Disk_name   string `pulumi:"disk_name"`
	Disk_size   int    `pulumi:"disk_size"`
	Disk_type   string `pulumi:"disk_type"`
	Exposed     bool   `pulumi:"exposed"`
	Order       string `pulumi:"order"`
	Pci_bus     int    `pulumi:"pci_bus"`
	Pci_slot    int    `pulumi:"pci_slot"`
	Status      string `pulumi:"status"`
}

type VmDiskOutput struct{ *pulumi.OutputState }

func (VmDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmDisk)(nil)).Elem()
}

func (o VmDiskOutput) ToVmDiskOutput() VmDiskOutput {
	return o
}

func (o VmDiskOutput) ToVmDiskOutputWithContext(ctx context.Context) VmDiskOutput {
	return o
}

func (o VmDiskOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v VmDisk) string { return v.Description }).(pulumi.StringOutput)
}

func (o VmDiskOutput) Disk_id() pulumi.IntOutput {
	return o.ApplyT(func(v VmDisk) int { return v.Disk_id }).(pulumi.IntOutput)
}

func (o VmDiskOutput) Disk_name() pulumi.StringOutput {
	return o.ApplyT(func(v VmDisk) string { return v.Disk_name }).(pulumi.StringOutput)
}

func (o VmDiskOutput) Disk_size() pulumi.IntOutput {
	return o.ApplyT(func(v VmDisk) int { return v.Disk_size }).(pulumi.IntOutput)
}

func (o VmDiskOutput) Disk_type() pulumi.StringOutput {
	return o.ApplyT(func(v VmDisk) string { return v.Disk_type }).(pulumi.StringOutput)
}

func (o VmDiskOutput) Exposed() pulumi.BoolOutput {
	return o.ApplyT(func(v VmDisk) bool { return v.Exposed }).(pulumi.BoolOutput)
}

func (o VmDiskOutput) Order() pulumi.StringOutput {
	return o.ApplyT(func(v VmDisk) string { return v.Order }).(pulumi.StringOutput)
}

func (o VmDiskOutput) Pci_bus() pulumi.IntOutput {
	return o.ApplyT(func(v VmDisk) int { return v.Pci_bus }).(pulumi.IntOutput)
}

func (o VmDiskOutput) Pci_slot() pulumi.IntOutput {
	return o.ApplyT(func(v VmDisk) int { return v.Pci_slot }).(pulumi.IntOutput)
}

func (o VmDiskOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v VmDisk) string { return v.Status }).(pulumi.StringOutput)
}

type VmDiskArrayOutput struct{ *pulumi.OutputState }

func (VmDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmDisk)(nil)).Elem()
}

func (o VmDiskArrayOutput) ToVmDiskArrayOutput() VmDiskArrayOutput {
	return o
}

func (o VmDiskArrayOutput) ToVmDiskArrayOutputWithContext(ctx context.Context) VmDiskArrayOutput {
	return o
}

func (o VmDiskArrayOutput) Index(i pulumi.IntInput) VmDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmDisk {
		return vs[0].([]VmDisk)[vs[1].(int)]
	}).(VmDiskOutput)
}

func init() {
	pulumi.RegisterOutputType(CpuTopologyOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(OsAccountOutput{})
	pulumi.RegisterOutputType(OsAccountArrayOutput{})
	pulumi.RegisterOutputType(VmDiskOutput{})
	pulumi.RegisterOutputType(VmDiskArrayOutput{})
}
