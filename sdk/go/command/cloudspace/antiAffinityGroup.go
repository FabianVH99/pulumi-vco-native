// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudspace

import (
	"context"
	"reflect"

	"errors"
	"github.com/fabianv-cloud/pulumi-vco-native/sdk/go/command/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AntiAffinityGroup struct {
	pulumi.CustomResourceState

	Cloudspace_id pulumi.StringOutput `pulumi:"cloudspace_id"`
	CustomerID    pulumi.StringOutput `pulumi:"customerID"`
	Group_id      pulumi.StringOutput `pulumi:"group_id"`
	Spread        pulumi.IntOutput    `pulumi:"spread"`
	Status        pulumi.StringOutput `pulumi:"status"`
	Token         pulumi.StringOutput `pulumi:"token"`
	Url           pulumi.StringOutput `pulumi:"url"`
}

// NewAntiAffinityGroup registers a new resource with the given unique name, arguments, and options.
func NewAntiAffinityGroup(ctx *pulumi.Context,
	name string, args *AntiAffinityGroupArgs, opts ...pulumi.ResourceOption) (*AntiAffinityGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cloudspace_id == nil {
		return nil, errors.New("invalid value for required argument 'Cloudspace_id'")
	}
	if args.CustomerID == nil {
		return nil, errors.New("invalid value for required argument 'CustomerID'")
	}
	if args.Group_id == nil {
		return nil, errors.New("invalid value for required argument 'Group_id'")
	}
	if args.Spread == nil {
		return nil, errors.New("invalid value for required argument 'Spread'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.CustomerID != nil {
		args.CustomerID = pulumi.ToSecret(args.CustomerID).(pulumi.StringInput)
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringInput)
	}
	if args.Url != nil {
		args.Url = pulumi.ToSecret(args.Url).(pulumi.StringInput)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AntiAffinityGroup
	err := ctx.RegisterResource("vco:cloudspace:AntiAffinityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAntiAffinityGroup gets an existing AntiAffinityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAntiAffinityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AntiAffinityGroupState, opts ...pulumi.ResourceOption) (*AntiAffinityGroup, error) {
	var resource AntiAffinityGroup
	err := ctx.ReadResource("vco:cloudspace:AntiAffinityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AntiAffinityGroup resources.
type antiAffinityGroupState struct {
}

type AntiAffinityGroupState struct {
}

func (AntiAffinityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*antiAffinityGroupState)(nil)).Elem()
}

type antiAffinityGroupArgs struct {
	Cloudspace_id string `pulumi:"cloudspace_id"`
	CustomerID    string `pulumi:"customerID"`
	Group_id      string `pulumi:"group_id"`
	Spread        int    `pulumi:"spread"`
	Token         string `pulumi:"token"`
	Url           string `pulumi:"url"`
}

// The set of arguments for constructing a AntiAffinityGroup resource.
type AntiAffinityGroupArgs struct {
	Cloudspace_id pulumi.StringInput
	CustomerID    pulumi.StringInput
	Group_id      pulumi.StringInput
	Spread        pulumi.IntInput
	Token         pulumi.StringInput
	Url           pulumi.StringInput
}

func (AntiAffinityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*antiAffinityGroupArgs)(nil)).Elem()
}

type AntiAffinityGroupInput interface {
	pulumi.Input

	ToAntiAffinityGroupOutput() AntiAffinityGroupOutput
	ToAntiAffinityGroupOutputWithContext(ctx context.Context) AntiAffinityGroupOutput
}

func (*AntiAffinityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AntiAffinityGroup)(nil)).Elem()
}

func (i *AntiAffinityGroup) ToAntiAffinityGroupOutput() AntiAffinityGroupOutput {
	return i.ToAntiAffinityGroupOutputWithContext(context.Background())
}

func (i *AntiAffinityGroup) ToAntiAffinityGroupOutputWithContext(ctx context.Context) AntiAffinityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiAffinityGroupOutput)
}

// AntiAffinityGroupArrayInput is an input type that accepts AntiAffinityGroupArray and AntiAffinityGroupArrayOutput values.
// You can construct a concrete instance of `AntiAffinityGroupArrayInput` via:
//
//	AntiAffinityGroupArray{ AntiAffinityGroupArgs{...} }
type AntiAffinityGroupArrayInput interface {
	pulumi.Input

	ToAntiAffinityGroupArrayOutput() AntiAffinityGroupArrayOutput
	ToAntiAffinityGroupArrayOutputWithContext(context.Context) AntiAffinityGroupArrayOutput
}

type AntiAffinityGroupArray []AntiAffinityGroupInput

func (AntiAffinityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AntiAffinityGroup)(nil)).Elem()
}

func (i AntiAffinityGroupArray) ToAntiAffinityGroupArrayOutput() AntiAffinityGroupArrayOutput {
	return i.ToAntiAffinityGroupArrayOutputWithContext(context.Background())
}

func (i AntiAffinityGroupArray) ToAntiAffinityGroupArrayOutputWithContext(ctx context.Context) AntiAffinityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiAffinityGroupArrayOutput)
}

// AntiAffinityGroupMapInput is an input type that accepts AntiAffinityGroupMap and AntiAffinityGroupMapOutput values.
// You can construct a concrete instance of `AntiAffinityGroupMapInput` via:
//
//	AntiAffinityGroupMap{ "key": AntiAffinityGroupArgs{...} }
type AntiAffinityGroupMapInput interface {
	pulumi.Input

	ToAntiAffinityGroupMapOutput() AntiAffinityGroupMapOutput
	ToAntiAffinityGroupMapOutputWithContext(context.Context) AntiAffinityGroupMapOutput
}

type AntiAffinityGroupMap map[string]AntiAffinityGroupInput

func (AntiAffinityGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AntiAffinityGroup)(nil)).Elem()
}

func (i AntiAffinityGroupMap) ToAntiAffinityGroupMapOutput() AntiAffinityGroupMapOutput {
	return i.ToAntiAffinityGroupMapOutputWithContext(context.Background())
}

func (i AntiAffinityGroupMap) ToAntiAffinityGroupMapOutputWithContext(ctx context.Context) AntiAffinityGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiAffinityGroupMapOutput)
}

type AntiAffinityGroupOutput struct{ *pulumi.OutputState }

func (AntiAffinityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AntiAffinityGroup)(nil)).Elem()
}

func (o AntiAffinityGroupOutput) ToAntiAffinityGroupOutput() AntiAffinityGroupOutput {
	return o
}

func (o AntiAffinityGroupOutput) ToAntiAffinityGroupOutputWithContext(ctx context.Context) AntiAffinityGroupOutput {
	return o
}

func (o AntiAffinityGroupOutput) Cloudspace_id() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiAffinityGroup) pulumi.StringOutput { return v.Cloudspace_id }).(pulumi.StringOutput)
}

func (o AntiAffinityGroupOutput) CustomerID() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiAffinityGroup) pulumi.StringOutput { return v.CustomerID }).(pulumi.StringOutput)
}

func (o AntiAffinityGroupOutput) Group_id() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiAffinityGroup) pulumi.StringOutput { return v.Group_id }).(pulumi.StringOutput)
}

func (o AntiAffinityGroupOutput) Spread() pulumi.IntOutput {
	return o.ApplyT(func(v *AntiAffinityGroup) pulumi.IntOutput { return v.Spread }).(pulumi.IntOutput)
}

func (o AntiAffinityGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiAffinityGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o AntiAffinityGroupOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiAffinityGroup) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

func (o AntiAffinityGroupOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiAffinityGroup) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type AntiAffinityGroupArrayOutput struct{ *pulumi.OutputState }

func (AntiAffinityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AntiAffinityGroup)(nil)).Elem()
}

func (o AntiAffinityGroupArrayOutput) ToAntiAffinityGroupArrayOutput() AntiAffinityGroupArrayOutput {
	return o
}

func (o AntiAffinityGroupArrayOutput) ToAntiAffinityGroupArrayOutputWithContext(ctx context.Context) AntiAffinityGroupArrayOutput {
	return o
}

func (o AntiAffinityGroupArrayOutput) Index(i pulumi.IntInput) AntiAffinityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AntiAffinityGroup {
		return vs[0].([]*AntiAffinityGroup)[vs[1].(int)]
	}).(AntiAffinityGroupOutput)
}

type AntiAffinityGroupMapOutput struct{ *pulumi.OutputState }

func (AntiAffinityGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AntiAffinityGroup)(nil)).Elem()
}

func (o AntiAffinityGroupMapOutput) ToAntiAffinityGroupMapOutput() AntiAffinityGroupMapOutput {
	return o
}

func (o AntiAffinityGroupMapOutput) ToAntiAffinityGroupMapOutputWithContext(ctx context.Context) AntiAffinityGroupMapOutput {
	return o
}

func (o AntiAffinityGroupMapOutput) MapIndex(k pulumi.StringInput) AntiAffinityGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AntiAffinityGroup {
		return vs[0].(map[string]*AntiAffinityGroup)[vs[1].(string)]
	}).(AntiAffinityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AntiAffinityGroupInput)(nil)).Elem(), &AntiAffinityGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AntiAffinityGroupArrayInput)(nil)).Elem(), AntiAffinityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AntiAffinityGroupMapInput)(nil)).Elem(), AntiAffinityGroupMap{})
	pulumi.RegisterOutputType(AntiAffinityGroupOutput{})
	pulumi.RegisterOutputType(AntiAffinityGroupArrayOutput{})
	pulumi.RegisterOutputType(AntiAffinityGroupMapOutput{})
}
