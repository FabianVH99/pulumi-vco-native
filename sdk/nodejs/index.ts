// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as anti_affinity_group from "./anti_affinity_group";
import * as base from "./base";
import * as cloudspace from "./cloudspace";
import * as disk from "./disk";
import * as ingress from "./ingress";
import * as objectspace from "./objectspace";
import * as types from "./types";
import * as virtual_machine from "./virtual_machine";

export {
    anti_affinity_group,
    base,
    cloudspace,
    disk,
    ingress,
    objectspace,
    types,
    virtual_machine,
};
pulumi.runtime.registerResourcePackage("vco", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vco") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
