// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AntiAffinityGroupArgs } from "./antiAffinityGroup";
export type AntiAffinityGroup = import("./antiAffinityGroup").AntiAffinityGroup;
export const AntiAffinityGroup: typeof import("./antiAffinityGroup").AntiAffinityGroup = null as any;
utilities.lazyLoad(exports, ["AntiAffinityGroup"], () => require("./antiAffinityGroup"));

export { AntiAffinityGroupVMArgs } from "./antiAffinityGroupVM";
export type AntiAffinityGroupVM = import("./antiAffinityGroupVM").AntiAffinityGroupVM;
export const AntiAffinityGroupVM: typeof import("./antiAffinityGroupVM").AntiAffinityGroupVM = null as any;
utilities.lazyLoad(exports, ["AntiAffinityGroupVM"], () => require("./antiAffinityGroupVM"));

export { CloudspaceArgs } from "./cloudspace";
export type Cloudspace = import("./cloudspace").Cloudspace;
export const Cloudspace: typeof import("./cloudspace").Cloudspace = null as any;
utilities.lazyLoad(exports, ["Cloudspace"], () => require("./cloudspace"));

export { ConnectedCloudspaceArgs } from "./connectedCloudspace";
export type ConnectedCloudspace = import("./connectedCloudspace").ConnectedCloudspace;
export const ConnectedCloudspace: typeof import("./connectedCloudspace").ConnectedCloudspace = null as any;
utilities.lazyLoad(exports, ["ConnectedCloudspace"], () => require("./connectedCloudspace"));

export { DiskArgs } from "./disk";
export type Disk = import("./disk").Disk;
export const Disk: typeof import("./disk").Disk = null as any;
utilities.lazyLoad(exports, ["Disk"], () => require("./disk"));

export { ExposedDiskArgs } from "./exposedDisk";
export type ExposedDisk = import("./exposedDisk").ExposedDisk;
export const ExposedDisk: typeof import("./exposedDisk").ExposedDisk = null as any;
utilities.lazyLoad(exports, ["ExposedDisk"], () => require("./exposedDisk"));

export { ExternalNetworkArgs } from "./externalNetwork";
export type ExternalNetwork = import("./externalNetwork").ExternalNetwork;
export const ExternalNetwork: typeof import("./externalNetwork").ExternalNetwork = null as any;
utilities.lazyLoad(exports, ["ExternalNetwork"], () => require("./externalNetwork"));

export { HostArgs } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { LoadBalancerArgs } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { ObjectSpaceLinkArgs } from "./objectSpaceLink";
export type ObjectSpaceLink = import("./objectSpaceLink").ObjectSpaceLink;
export const ObjectSpaceLink: typeof import("./objectSpaceLink").ObjectSpaceLink = null as any;
utilities.lazyLoad(exports, ["ObjectSpaceLink"], () => require("./objectSpaceLink"));

export { PortForwardArgs } from "./portForward";
export type PortForward = import("./portForward").PortForward;
export const PortForward: typeof import("./portForward").PortForward = null as any;
utilities.lazyLoad(exports, ["PortForward"], () => require("./portForward"));

export { ReverseProxyArgs } from "./reverseProxy";
export type ReverseProxy = import("./reverseProxy").ReverseProxy;
export const ReverseProxy: typeof import("./reverseProxy").ReverseProxy = null as any;
utilities.lazyLoad(exports, ["ReverseProxy"], () => require("./reverseProxy"));

export { ServerPoolArgs } from "./serverPool";
export type ServerPool = import("./serverPool").ServerPool;
export const ServerPool: typeof import("./serverPool").ServerPool = null as any;
utilities.lazyLoad(exports, ["ServerPool"], () => require("./serverPool"));

export { VirtualMachineArgs } from "./virtualMachine";
export type VirtualMachine = import("./virtualMachine").VirtualMachine;
export const VirtualMachine: typeof import("./virtualMachine").VirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));

export { VirtualMachineCDArgs } from "./virtualMachineCD";
export type VirtualMachineCD = import("./virtualMachineCD").VirtualMachineCD;
export const VirtualMachineCD: typeof import("./virtualMachineCD").VirtualMachineCD = null as any;
utilities.lazyLoad(exports, ["VirtualMachineCD"], () => require("./virtualMachineCD"));

export { VirtualMachineDiskArgs } from "./virtualMachineDisk";
export type VirtualMachineDisk = import("./virtualMachineDisk").VirtualMachineDisk;
export const VirtualMachineDisk: typeof import("./virtualMachineDisk").VirtualMachineDisk = null as any;
utilities.lazyLoad(exports, ["VirtualMachineDisk"], () => require("./virtualMachineDisk"));

export { VirtualMachineNICArgs } from "./virtualMachineNIC";
export type VirtualMachineNIC = import("./virtualMachineNIC").VirtualMachineNIC;
export const VirtualMachineNIC: typeof import("./virtualMachineNIC").VirtualMachineNIC = null as any;
utilities.lazyLoad(exports, ["VirtualMachineNIC"], () => require("./virtualMachineNIC"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vco:resources:AntiAffinityGroup":
                return new AntiAffinityGroup(name, <any>undefined, { urn })
            case "vco:resources:AntiAffinityGroupVM":
                return new AntiAffinityGroupVM(name, <any>undefined, { urn })
            case "vco:resources:Cloudspace":
                return new Cloudspace(name, <any>undefined, { urn })
            case "vco:resources:ConnectedCloudspace":
                return new ConnectedCloudspace(name, <any>undefined, { urn })
            case "vco:resources:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "vco:resources:ExposedDisk":
                return new ExposedDisk(name, <any>undefined, { urn })
            case "vco:resources:ExternalNetwork":
                return new ExternalNetwork(name, <any>undefined, { urn })
            case "vco:resources:Host":
                return new Host(name, <any>undefined, { urn })
            case "vco:resources:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "vco:resources:ObjectSpaceLink":
                return new ObjectSpaceLink(name, <any>undefined, { urn })
            case "vco:resources:PortForward":
                return new PortForward(name, <any>undefined, { urn })
            case "vco:resources:ReverseProxy":
                return new ReverseProxy(name, <any>undefined, { urn })
            case "vco:resources:ServerPool":
                return new ServerPool(name, <any>undefined, { urn })
            case "vco:resources:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "vco:resources:VirtualMachineCD":
                return new VirtualMachineCD(name, <any>undefined, { urn })
            case "vco:resources:VirtualMachineDisk":
                return new VirtualMachineDisk(name, <any>undefined, { urn })
            case "vco:resources:VirtualMachineNIC":
                return new VirtualMachineNIC(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vco", "resources", _module)
