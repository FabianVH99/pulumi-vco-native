"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualMachineNIC = exports.VirtualMachineDisk = exports.VirtualMachineCD = exports.VirtualMachine = exports.ServerPool = exports.ReverseProxy = exports.PortForward = exports.ObjectSpaceLink = exports.LoadBalancer = exports.Host = exports.ExternalNetwork = exports.ExposedDisk = exports.Disk = exports.ConnectedCloudspace = exports.Cloudspace = exports.AntiAffinityGroupVM = exports.AntiAffinityGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AntiAffinityGroup = null;
utilities.lazyLoad(exports, ["AntiAffinityGroup"], () => require("./antiAffinityGroup"));
exports.AntiAffinityGroupVM = null;
utilities.lazyLoad(exports, ["AntiAffinityGroupVM"], () => require("./antiAffinityGroupVM"));
exports.Cloudspace = null;
utilities.lazyLoad(exports, ["Cloudspace"], () => require("./cloudspace"));
exports.ConnectedCloudspace = null;
utilities.lazyLoad(exports, ["ConnectedCloudspace"], () => require("./connectedCloudspace"));
exports.Disk = null;
utilities.lazyLoad(exports, ["Disk"], () => require("./disk"));
exports.ExposedDisk = null;
utilities.lazyLoad(exports, ["ExposedDisk"], () => require("./exposedDisk"));
exports.ExternalNetwork = null;
utilities.lazyLoad(exports, ["ExternalNetwork"], () => require("./externalNetwork"));
exports.Host = null;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));
exports.LoadBalancer = null;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));
exports.ObjectSpaceLink = null;
utilities.lazyLoad(exports, ["ObjectSpaceLink"], () => require("./objectSpaceLink"));
exports.PortForward = null;
utilities.lazyLoad(exports, ["PortForward"], () => require("./portForward"));
exports.ReverseProxy = null;
utilities.lazyLoad(exports, ["ReverseProxy"], () => require("./reverseProxy"));
exports.ServerPool = null;
utilities.lazyLoad(exports, ["ServerPool"], () => require("./serverPool"));
exports.VirtualMachine = null;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));
exports.VirtualMachineCD = null;
utilities.lazyLoad(exports, ["VirtualMachineCD"], () => require("./virtualMachineCD"));
exports.VirtualMachineDisk = null;
utilities.lazyLoad(exports, ["VirtualMachineDisk"], () => require("./virtualMachineDisk"));
exports.VirtualMachineNIC = null;
utilities.lazyLoad(exports, ["VirtualMachineNIC"], () => require("./virtualMachineNIC"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "vco:resources:AntiAffinityGroup":
                return new exports.AntiAffinityGroup(name, undefined, { urn });
            case "vco:resources:AntiAffinityGroupVM":
                return new exports.AntiAffinityGroupVM(name, undefined, { urn });
            case "vco:resources:Cloudspace":
                return new exports.Cloudspace(name, undefined, { urn });
            case "vco:resources:ConnectedCloudspace":
                return new exports.ConnectedCloudspace(name, undefined, { urn });
            case "vco:resources:Disk":
                return new exports.Disk(name, undefined, { urn });
            case "vco:resources:ExposedDisk":
                return new exports.ExposedDisk(name, undefined, { urn });
            case "vco:resources:ExternalNetwork":
                return new exports.ExternalNetwork(name, undefined, { urn });
            case "vco:resources:Host":
                return new exports.Host(name, undefined, { urn });
            case "vco:resources:LoadBalancer":
                return new exports.LoadBalancer(name, undefined, { urn });
            case "vco:resources:ObjectSpaceLink":
                return new exports.ObjectSpaceLink(name, undefined, { urn });
            case "vco:resources:PortForward":
                return new exports.PortForward(name, undefined, { urn });
            case "vco:resources:ReverseProxy":
                return new exports.ReverseProxy(name, undefined, { urn });
            case "vco:resources:ServerPool":
                return new exports.ServerPool(name, undefined, { urn });
            case "vco:resources:VirtualMachine":
                return new exports.VirtualMachine(name, undefined, { urn });
            case "vco:resources:VirtualMachineCD":
                return new exports.VirtualMachineCD(name, undefined, { urn });
            case "vco:resources:VirtualMachineDisk":
                return new exports.VirtualMachineDisk(name, undefined, { urn });
            case "vco:resources:VirtualMachineNIC":
                return new exports.VirtualMachineNIC(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vco", "resources", _module);
//# sourceMappingURL=index.js.map